package com.kii.beehive.portal.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.kii.beehive.portal.jdbc.entity.BeehiveUser;
import com.kii.beehive.portal.service.BeehiveUserService;
import com.kii.beehive.portal.web.entity.OutputUser;
import com.kii.beehive.portal.web.help.PortalException;

/**
 * Beehive API - User API
 *
 * refer to doc "Tech Design - Beehive API" section "User API" for details
 */
@RestController
@RequestMapping(path = "/users",  consumes = {MediaType.APPLICATION_JSON_UTF8_VALUE}, produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
public class UserController {


	@Autowired
	private BeehiveUserService userService;

    @RequestMapping(path="",method={RequestMethod.POST})
    public Map<String,Object> createUser(@RequestBody OutputUser user){

		// TODO need to update document, to clarify the user id will be generated by Beehive automatically, can't input

		if(StringUtils.isEmpty(user.getUserName())){
			throw new PortalException("RequiredFieldsMissing","username cannot been null", HttpStatus.BAD_REQUEST);
		}

		BeehiveUser beehiveUser=user.getBeehiveUser();

		long userID=userService.addUser(beehiveUser);

		Map<String, Object> map=new HashMap<>();
		map.put("userID",userID);
		map.put("userName",user.getUserName());
		return map;
    }

    @RequestMapping(path="/{userID}",method={RequestMethod.PATCH})
    public Map<String,Object> updateUser(@PathVariable("userID") long userID,@RequestBody OutputUser user){

		userService.updateUser(user.getBeehiveUser(), userID);


		Map<String,Object> map=new HashMap<>();
		map.put("userID",userID);
		return map;
    }

	@RequestMapping(path="/{userID}",method={RequestMethod.GET})
	public OutputUser getUser(@PathVariable("userID") long userID){
		return new OutputUser(userService.getUserByID(userID));
	}


    @RequestMapping(path="/{userID}/custom",method={RequestMethod.PATCH})
    public void updateCustomProp(@PathVariable("userID") long userID,@RequestBody Map<String,Object> props){

		// TODO need to check whether can merge this into updateUser(@PathVariable("userID")
//		userService.updateCustomProp(userID,props);
    }


	@RequestMapping(path="/{userID}",method={RequestMethod.DELETE},consumes={"*"})
	public void deleteUser(@PathVariable("userID") long userID){

		userService.deleteUser(userID);

	}


    @RequestMapping(path="/simplequery",method={RequestMethod.POST})
    public List<OutputUser> queryUserByProps(@RequestBody Map<String,Object> queryMap){
	// TODO need to update document to clarify that querying on custom field is not supported

		Map<String, Object> map = new HashMap<>();
		map.put(BeehiveUser.USER_ID, queryMap.get("userID"));
		map.put(BeehiveUser.USER_NAME, queryMap.get("userName"));
		map.put(BeehiveUser.PHONE, queryMap.get("phone"));
		map.put(BeehiveUser.MAIL, queryMap.get("mail"));
		map.put(BeehiveUser.COMPANY, queryMap.get("company"));
		map.put(BeehiveUser.ROLE, queryMap.get("role"));

		return  userService.simpleQueryUser(queryMap).stream()
				.map((e) -> new OutputUser(e))
				.collect(Collectors.toCollection(ArrayList::new));

    }


}
