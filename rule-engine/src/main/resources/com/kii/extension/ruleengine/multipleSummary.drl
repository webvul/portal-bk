package com.kii.extension.ruleengine.drools.rule

import com.kii.extension.ruleengine.drools.entity.*;

rule "copy  all multiples's unit summary value to multipleMap"
  no-loop true
when
	Trigger(type ==TriggerType.multiple , $triggerID:triggerID)
	$summary:SummaryResult(triggerID==$triggerID)
	$thing:ThingResult(triggerID==$triggerID)
	$multiplesMap:MultiplesValueMap(triggerID==$triggerID)
then
	modify($multiplesMap){
    	setSummaryValue($summary),
    	setThingValue($thing)
    };
end



rule "in unit,compute the  summary of  fieldName value: funName"
when
	$trigger:Trigger(type==TriggerType.multiple,$triggerID:triggerID)
	$summary:Summary(triggerID==$triggerID, funName=="sum" ,$name:name,$things:things)
	accumulate( $status : MemberMatchResult(thingID memberOf $things , name==$name);
                    $sum : sum($status.getNumValue($summary.getFieldName()))
                  )
then
	insert(new SummaryResult($triggerID,$name,$sum));
end


rule "in unit,compute the  count of  fieldName value: funName"
when
	$trigger:Trigger(type==TriggerType.multiple,$triggerID:triggerID)
	$summary:Summary(triggerID==$triggerID, funName=="count" ,$name:name,$things:things)
	accumulate( $status : MemberMatchResult(thingID memberOf $things ,name==$name);
                    $sum : count($status)
                  )
then
	insert(new SummaryResult($triggerID,$name,$sum));
end

rule "in unit,compute the  max of  fieldName value: funName"
when
	$trigger:Trigger(type==TriggerType.multiple,$triggerID:triggerID)
	$summary:Summary(triggerID==$triggerID, funName=="max" ,$name:name,$things:things)
	accumulate( $status : MemberMatchResult(thingID memberOf $things , name==$name);
                    $sum : max($status.getNumValue($summary.getFieldName()))
                  )
then
	insert(new SummaryResult($triggerID,$name,$sum));
end

rule "in unit,compute the  min of  fieldName value: funName"
when
	$trigger:Trigger(type==TriggerType.multiple,$triggerID:triggerID)
	$summary:Summary(triggerID==$triggerID, funName=="min" ,$name:name,$things:things)
	accumulate( $status : MemberMatchResult(thingID memberOf $things , name==$name);
                    $sum : min($status.getNumValue($summary.getFieldName()))
                  )
then
	insert(new SummaryResult($triggerID,$name,$sum));
end


rule "in unit,compute the  avg of  fieldName value: funName"
when
	$trigger:Trigger(type==TriggerType.multiple,$triggerID:triggerID)
	$summary:Summary(triggerID==$triggerID, funName=="average" ,$name:name,$things:things)
	accumulate( $status : MemberMatchResult(thingID memberOf $things , name ==$name );
                    $sum : average($status.getNumValue($summary.getFieldName()))
                  )
then
	insert(new SummaryResult($triggerID,$name,$sum));
end