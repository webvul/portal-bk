package com.kii.beehive.portal.manager;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.kii.beehive.business.service.KiiUserService;
import com.kii.beehive.portal.auth.AuthInfoStore;
import com.kii.beehive.portal.common.utils.StringRandomTools;
import com.kii.beehive.portal.exception.ObjectNotFoundException;
import com.kii.beehive.portal.exception.UnauthorizedException;
import com.kii.beehive.portal.jdbc.dao.GroupUserRelationDao;
import com.kii.beehive.portal.jdbc.dao.TeamUserRelationDao;
import com.kii.beehive.portal.jdbc.entity.TeamUserRelation;
import com.kii.beehive.portal.service.BeehiveUserDao;
import com.kii.beehive.portal.store.entity.AuthInfoEntry;
import com.kii.beehive.portal.store.entity.BeehiveUser;
import com.kii.extension.sdk.entity.LoginInfo;

@Component
@Transactional
public class BeehiveUserManager {




	@Autowired
	protected TeamUserRelationDao teamUserRelationDao;
	@Autowired
	private KiiUserService kiiUserService;

	@Autowired
	private BeehiveUserDao userDao;


	@Autowired
	private GroupUserRelationDao groupUserRelationDao;

	public String  addUser(BeehiveUser user) {


		BeehiveUser existsUser=userDao.getUserByName(user.getUserName());

		if(existsUser!=null){
			throw new IllegalArgumentException("the username had existed,please change a loginName or email or phone Number");
		}

		userDao.addEntity(user);

		String loginID=kiiUserService.addBeehiveUser(user.getId(),user.getDefaultPassword());

		user.setKiiUserID(loginID);

		String token= StringRandomTools.getRandomStr(6);

		user.setActivityToken(user.getHashedPwd(token));

		userDao.updateEntity(user,user.getId());

		return token;
	}


	public void deleteUser(String userID) {
		checkTeam(userID);
		BeehiveUser user = userDao.getUserByID(userID);

		//this.removeUserFromUserGroup(userID, user.getGroups());

		groupUserRelationDao.delete(userID, null);

		kiiUserService.disableBeehiveUser(user);

		userDao.deleteUser(userID);


	}

	public BeehiveUser getUserByID(String userID) {

		checkTeam(userID);
		return userDao.getUserByID(userID);
	}


	public void updateUser(BeehiveUser user,String userID){

		checkTeam(userID);
		userDao.updateEntity(user,userID);


	}


	private void checkTeam(String userID){
		if(AuthInfoStore.isTeamIDExist()){
			TeamUserRelation tur = teamUserRelationDao.findByTeamIDAndUserID(AuthInfoStore.getTeamID(), userID);
			if(tur == null){
				throw new ObjectNotFoundException( "userID:" + userID + " Not Found");
			}
		}
	}


	/**
	 * register with userID and password
	 * the logic behind is as below:
	 * 1. login with the default password (generated by KiiUserSyncDao when created beehive user)
	 * 2. change password with the token from login
	 *
	 * @param userID
	 * @param password
	 */
	public boolean activity(String userID, String token) {

		// TODO need to check why below was ever commented out?
//			String defaultPassword = this.getDefaultPassword(user);

		BeehiveUser user = userDao.getUserByID(userID);


		if(StringUtils.isEmpty(user.getActivityToken())){
//			throw new UnauthorizedException("the activity token invalid or outdate");
			return false;
		}
		boolean sign = user.getActivityToken().equals(user.getHashedPwd(token));

		if (sign) {
			//one-time token
			userDao.updateWithVerify(userID, Collections.singletonMap("activityToken", null), user.getVersion());
		}

		return sign;
	}



}
